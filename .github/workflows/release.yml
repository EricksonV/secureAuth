name: Release

on:
  push:
    tags: ['v*']          # corre al pushear tags que empiezan con v (v1.0.1)
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g. v1.0.1)'
        required: false
        default: ''

# Permisos para que GITHUB_TOKEN pueda escribir contenidos/release
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (fetch tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Detect lockfile para decidir ci/install y cache
      - name: Detect lockfile
        id: detect-lock
        shell: bash
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ] || [ -f yarn.lock ]; then
            echo "has_lock=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_lock=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ steps.detect-lock.outputs.has_lock == 'true' && 'npm' || '' }}

      - name: Install deps (npm ci)
        if: steps.detect-lock.outputs.has_lock == 'true'
        run: npm ci

      - name: Install deps (npm install)
        if: steps.detect-lock.outputs.has_lock != 'true'
        run: npm install

      - name: Typecheck
        run: npx tsc --noEmit

      - name: Build
        run: npm run build

      - name: Pack dist
        run: tar -czf dist.tar.gz dist package.json README.md

      - name: Compute release tag
        id: tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          fi

      # ⚠️ Usa PAT si existe; si no, usa GITHUB_TOKEN
      - name: Create GitHub Release (gh CLI)
        env:
          GH_TOKEN: ${{ secrets.GH_RELEASE_TOKEN != '' && secrets.GH_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG="${{ steps.tag.outputs.tag }}"
          # si el release ya existe, actualiza assets; si no, créalo
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG ya existe; actualizando assets…"
            gh release upload "$TAG" dist.tar.gz --clobber
          else
            echo "Creando release $TAG…"
            gh release create "$TAG" dist.tar.gz -t "$TAG" -n "Automated release for $TAG"
          fi
